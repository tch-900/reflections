How did viewing a diff between two versions of a file help you see the bug that was introduced?
It narrows down your view of a potentially very large file to just those parts which have been changed

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Not only can you go back to a pre-bug version, you can effectively undo an entire branch of the development of you later decide it was unwise

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs
The advantage is that the change between commits will be a sensible size, and each commit represents a logical, coherent progression. The disadvantage is that if you forget, it won't happen

Why do you think that some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Version control systems like Git are dealing with systems of files which are interrelated in such a way that it makes sense to track them together

How can you use the commands git log and git diff to view the history of files?
git log gives me a list of commits which I can scan down looking at the commit messages. When I find one I'm interested in I can copy its git ID and the ID of the previous commit and then use git diff to get the difference between them

How might using version control make you more confident to make changes that could break something?
If I break something, it's easy to go back to the last unbroken version

Now that you have your workspace set up, what do you want to try using Git for?
In the immediate future, I need it for some courses I plan to take on Udacity, but I also intend to use it for some development work

