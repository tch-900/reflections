What happens when you initialise a repository? Why do you need to do it?
Initialisation creates the .git file which will contain all of the history information for the repository

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area holds a subset of the working directory, and its contents are not yet in the repository. It offers a convenient way to group files together for a commit. It isn't essential, just convenient

How can you use the staging area to make sure you have one commit per logical change?
You can check the changes in the staging area against both the most recent commit and the files in the working directory to confirm what they are before committing

What are some situations when branches would be helpful in keeping your history organised? How would branches help?
One example would be if you were making experimental changes which you wanted to keep separate from the main code base. Or, a different version of the code, in another language for instance. Each version of the code would have its own branch, keeping them separate, but allowing you to switch between them easily

How do the diagrams help you visualise the branch structure?
They enable me to see the structure "in one go." Without them I'd have difficulty keeping the whole structure in my head

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The resultant merged branch contains the changes made in both branches since their last common ancestor. The diagram simply represents this

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Automatic merging is faster and more convenient. When it spots an ambiguity, it forces you to merge manually anyway. Always merging manually would force you to be more aware of other people's changes to the code, but generally would be a waste of time.
